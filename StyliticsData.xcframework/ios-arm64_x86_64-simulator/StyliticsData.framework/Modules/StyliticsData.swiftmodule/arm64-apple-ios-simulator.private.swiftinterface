// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name StyliticsData
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CryptoKit
import Foundation
import SQLite3
@_exported import StyliticsData
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct StyledForYouContextItem {
  public let baseImageUrl: Swift.String?
  public let name: Swift.String?
  public let price: Swift.Double?
  public var bundles: [StyliticsData.OutfitBundle]?
  public let salePrice: Swift.Double?
  public let priceLocalized: Swift.String?
  public let salePriceLocalized: Swift.String?
  public let purchasedAt: Swift.String?
  public let remoteId: Swift.String?
  public var requestId: Swift.String
  public var contextType: StyliticsData.ContextType?
}
extension StyliticsData.StyledForYouContextItem : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct CollageDimensions {
  public let outfitHeight: Swift.Int?
  public let outfitWidth: Swift.Int?
  public let imageHeight: Swift.Int?
  public let imageWidth: Swift.Int?
}
extension StyliticsData.CollageDimensions : Swift.Decodable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case outfitHeight
    case outfitWidth
    case imageHeight
    case imageWidth
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShopTheSetResponse {
  public typealias ResponseType = StyliticsData.ShopTheSet
  public let response: Foundation.URLResponse?
  public let data: StyliticsData.ShopTheSetResponse.ResponseType?
  public let error: (any Swift.Error)?
}
public struct Coords {
  public let xCoord: Swift.Int?
  public let yCoord: Swift.Int?
  public let zCoord: Swift.Int?
  public let height: Swift.Int?
  public let width: Swift.Int?
}
extension StyliticsData.Coords : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct BrowsedItem {
  public let id: Swift.Int?
  public let name: Swift.String?
  public let pairingMessage: Swift.String?
}
extension StyliticsData.BrowsedItem : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct ReplacementsResponse {
  public typealias ResponseType = StyliticsData.ReplacementItems
  public let response: Foundation.URLResponse?
  public let data: StyliticsData.ReplacementsResponse.ResponseType?
  public let error: (any Swift.Error)?
  public init(response: Foundation.URLResponse?, data: StyliticsData.ReplacementsResponse.ResponseType?, error: (any Swift.Error)?)
}
public struct UpsellsResponse {
  public typealias ResponseType = StyliticsData.UpsellItems
  public let response: Foundation.URLResponse?
  public var data: StyliticsData.UpsellsResponse.ResponseType?
  public let error: (any Swift.Error)?
  public func isResponseEmpty() -> Swift.Bool
  public init(response: Foundation.URLResponse?, data: StyliticsData.UpsellsResponse.ResponseType? = nil, error: (any Swift.Error)?)
}
public struct OutfitLandingPage : StyliticsData.IStyliticsData {
  public var outfitBundle: StyliticsData.OutfitBundle?
  public var outfitBundleItems: [StyliticsData.OutfitBundleItem]?
  public var similarOutfits: [StyliticsData.OutfitBundle]?
}
extension StyliticsData.OutfitLandingPage : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct StyledForYouFullPageResponse : StyliticsData.IStyliticsData {
  public var styledForYouResponse: StyliticsData.StyledForYouResponse
  public var trendingBundlesResponse: StyliticsData.TrendingBundlesResponse
  public var upsellsResponse: StyliticsData.UpsellsResponse
  public init(styledForYouResponse: StyliticsData.StyledForYouResponse, trendingBundlesResponse: StyliticsData.TrendingBundlesResponse, upsellsResponse: StyliticsData.UpsellsResponse)
}
public struct EngagementsResponse {
  public var error: (any Swift.Error)?
}
final public class StyliticsConfig {
  final public let timeoutInSecs: Swift.Double?
  final public let enableDebugLogs: Swift.Bool?
  final public let dataApisHost: StyliticsData.DataApisHost?
  final public let trackingApisHost: StyliticsData.TrackingApisHost?
  final public var locale: Swift.String?
  final public let clientName: Swift.String
  final public var customerProfileId: Swift.String?
  public init(timeoutInSecs: Swift.Double? = nil, enableDebugLogs: Swift.Bool? = nil, dataApisHost: StyliticsData.DataApisHost? = nil, trackingApisHost: StyliticsData.TrackingApisHost? = nil, locale: Swift.String? = nil, clientName: Swift.String, customerProfileId: Swift.String? = nil)
  @objc deinit
}
public struct PurchasedItem {
  public let id: Swift.Int?
  public let name: Swift.String?
  public let pairingMessage: Swift.String?
}
extension StyliticsData.PurchasedItem : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.Dictionary {
  public func merge(_ dict: [Key : Value]?) -> [Key : Value]
}
extension StyliticsData.OutfitBundle {
  public var pageURL: Swift.String? {
    get
  }
  public func getAnchorItem() -> StyliticsData.OutfitBundleItem?
}
public struct OutfitsResponse {
  public typealias ResponseType = StyliticsData.Outfits
  public let response: Foundation.URLResponse?
  public let data: StyliticsData.OutfitsResponse.ResponseType?
  public let error: (any Swift.Error)?
}
public struct PurchasesResponse {
  public var error: (any Swift.Error)?
}
public struct ShopTheSetItem {
  public let promotions: [Swift.String]?
  public let lookbookImageUrl: Swift.String?
  public let category: Swift.String?
  public let tags: [Swift.String]?
  public let department: Swift.String?
  public let colorHex: Swift.String?
  public let largeImageUrl: Swift.String?
  public let otherClientItemIds: StyliticsData.DecodableDictionary?
  public let smallImageUrl: Swift.String?
  public let color: Swift.String?
  public let priceLocalized: Swift.String?
  public let accountId: Swift.Int?
  public let productId: Swift.String?
  public let itemId: Swift.Int?
  public let transparentImageUrl: Swift.String?
  public let name: Swift.String?
  public let affiliateLink: Swift.String?
  public let username: Swift.String?
  public let retailerCategory: Swift.String?
  public let baseImageUrl: Swift.String?
  public let imageUrl: Swift.String?
  public let brand: Swift.String?
  public let style: Swift.String?
  public let remoteId: Swift.String?
  public let sku: Swift.String?
  public let stocked: Swift.Bool?
  public let salePrice: Swift.Double?
  public let colorRgbs: [Swift.Int]?
  public let retailerStyle: Swift.String?
  public let clientOriginalImageUrl: Swift.String?
  public let accountUsername: Swift.String?
  public let retailer: Swift.String?
  public let salePriceLocalized: Swift.String?
  public let gender: Swift.String?
  public let skus: [Swift.String]?
  public let retailerColor: Swift.String?
  public let price: Swift.Double?
  public let pattern: Swift.String?
  public var requestId: Swift.String
}
extension StyliticsData.ShopTheSetItem : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class ExperienceConfigManager {
  @objc deinit
}
extension StyliticsData.ExperienceConfigManager {
  public static var labelStyle: Swift.String? {
    get
  }
  public static func syfyFullPageModules() -> [StyliticsData.SYFYFullPageModule]?
  public static var variantWidget: Swift.String? {
    get
  }
}
public struct GalleryBundles : StyliticsData.IStyliticsData {
  public var list: [StyliticsData.OutfitBundle]
}
extension StyliticsData.GalleryBundles : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum ContextType : Swift.String {
  case purchased
  case browsed
  case item
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NetworkError : Swift.Error {
  case noData
  public static func == (a: StyliticsData.NetworkError, b: StyliticsData.NetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ModelLookup {
}
public struct TrendingBundles : StyliticsData.IStyliticsData {
  public var list: [StyliticsData.OutfitBundle]?
}
extension StyliticsData.TrendingBundles : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum TrackingApisHost {
  case production
  case staging
  case custom(Swift.String)
  public var host: Swift.String {
    get
  }
}
public struct StyledForYouResponse {
  public typealias ResponseType = StyliticsData.StyledForYou
  public let response: Foundation.URLResponse?
  public var data: StyliticsData.StyledForYouResponse.ResponseType?
  public let error: (any Swift.Error)?
  public func isResponseEmpty() -> Swift.Bool
  public init(response: Foundation.URLResponse?, data: StyliticsData.StyledForYouResponse.ResponseType? = nil, error: (any Swift.Error)?)
}
public struct Outfits : StyliticsData.IStyliticsData {
  public var list: [StyliticsData.OutfitBundle]
  public let localizationVersion: Swift.String?
  public var isMixAndMatchEnabled: Swift.Bool
  public var accountId: Swift.Int?
  public init(list: [StyliticsData.OutfitBundle], localizationVersion: Swift.String?, isMixAndMatchEnabled: Swift.Bool, accountId: Swift.Int? = nil)
}
extension StyliticsData.Outfits : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum Event : Swift.String, Swift.CaseIterable {
  case load
  case view
  case click
  case swap
  case jumplink
  case visit
  case addToCart
  case seeMoreExpand
  case seeMoreCollapse
  public init?(rawValue: Swift.String)
  public typealias AllCases = [StyliticsData.Event]
  public typealias RawValue = Swift.String
  public static var allCases: [StyliticsData.Event] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum UIComponent : Swift.String {
  case hotspot
  case itemList
  case itemListCta
  case modalItemList
  case itemTile
  case collage
  case productList
  case miniModal
  case bundleCta
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ShopTheSetEventType : Swift.String {
  case set
  case item
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ShopTheSetActionItemPosition {
  case top
  case bottom
  public static func == (a: StyliticsData.ShopTheSetActionItemPosition, b: StyliticsData.ShopTheSetActionItemPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TrackingInfoKey : Swift.String {
  case widgetType
  case pageUrl
  case uiComponent
  case outfit
  case outfitBundle
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TrackingWidgetType : Swift.String {
  case shopTheSet
  case styledForYou
  case classic
  case hotspot
  case dynamicGalleries
  case outfitLandingPage
  case grid
  case trendingBundles
  case upsells
  case styledForYouFullPage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StyledForYou : StyliticsData.IStyliticsData {
  public var purchased: StyliticsData.StyledForYouContext?
  public var browsed: StyliticsData.StyledForYouContext?
  public init(purchased: StyliticsData.StyledForYouContext? = nil, browsed: StyliticsData.StyledForYouContext? = nil)
}
extension StyliticsData.StyledForYou : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct BundleContext {
  public let imageUrl: Swift.String?
  public let contextType: StyliticsData.ContextType
  public let pairingMessage: Swift.String?
  public let productName: Swift.String?
  public init(imageUrl: Swift.String?, contextType: StyliticsData.ContextType, pairingMessage: Swift.String?, productName: Swift.String?)
}
public struct ShopTheSetItemsInfo {
  public let topItem: StyliticsData.ShopTheSetItem
  public let topItemPosition: Swift.Int
  public let bottomItem: StyliticsData.ShopTheSetItem
  public let bottomItemPosition: Swift.Int
  public let actionItemPosition: StyliticsData.ShopTheSetActionItemPosition
  public init(topItem: StyliticsData.ShopTheSetItem, topItemPosition: Swift.Int, bottomItem: StyliticsData.ShopTheSetItem, bottomItemPosition: Swift.Int, actionItemPosition: StyliticsData.ShopTheSetActionItemPosition)
  public var collectionIds: [Swift.Int]? {
    get
  }
}
public struct ReplacementItems : StyliticsData.IStyliticsData {
  public let items: [Swift.String : [StyliticsData.OutfitBundleItem]]
}
extension StyliticsData.ReplacementItems : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class StyliticsDataApis {
  public static func outfits(filterInfo: [Swift.String : Swift.String], shouldEnableMixAndMatch: Swift.Bool = false, response: @escaping (StyliticsData.OutfitsResponse) -> Swift.Void) throws
  public static func replacements(optionsInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.ReplacementsResponse) -> Swift.Void)
  public static func dynamicGalleries(filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.DynamicGalleriesResponse) -> Swift.Void) throws
  public static func styledForYou(filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.StyledForYouResponse) -> Swift.Void) throws
  public static func styledForYouFullPage(filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.StyledForYouFullPageResponse) -> Swift.Void) throws
  public static func trendingBundles(filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.TrendingBundlesResponse) -> Swift.Void) throws
  public static func upsells(filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.UpsellsResponse) -> Swift.Void) throws
  public static func shopTheSet(filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.ShopTheSetResponse) -> Swift.Void) throws
  public static func outfitLandingPage(outfitId: Swift.Int, filterInfo: [Swift.String : Swift.String], response: @escaping (StyliticsData.OutfitLandingPageResponse) -> Swift.Void) throws
  public static func configure(config: StyliticsData.StyliticsConfig) throws
  public static func engagement(trackingInfo: StyliticsData.EngagementsTrackingInfo, response: ((StyliticsData.EngagementsResponse) -> Swift.Void)? = nil)
  public static func purchases(purchasedItems: StyliticsData.PurchasedItems, response: ((StyliticsData.PurchasesResponse) -> Swift.Void)? = nil)
  public static func updateGlobalLocale(_ locale: Swift.String?) throws
  public static func updateCustomerProfileId(_ customerProfileId: Swift.String?) throws
  public static func doNotTrack(_ doNotTrack: Swift.Bool)
  public static func outfitsCountDisplayedByUxSdk(outfits: StyliticsData.Outfits, outfitTemplate: StyliticsData.OutfitTemplate) -> Swift.Int
  @objc deinit
}
public struct OutfitLandingPageResponse {
  public typealias ResponseType = StyliticsData.OutfitLandingPage
  public let response: Foundation.URLResponse?
  public let data: StyliticsData.OutfitLandingPageResponse.ResponseType?
  public let error: (any Swift.Error)?
}
public struct ShopTheSet : StyliticsData.IStyliticsData {
  public let accountId: Swift.Int?
  public var itemSets: [[StyliticsData.ShopTheSetItem]]?
}
extension StyliticsData.ShopTheSet : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct PurchasedItems {
  public init(currency: Swift.String, orderId: Swift.String? = nil, itemInfoList: [StyliticsData.PurchasedItemInfo])
}
public struct PurchasedItemInfo {
  public init?(remoteId: Swift.String?, itemId: Swift.String?, price: Swift.Double?)
  public init?(remoteId: Swift.String?, itemId: Swift.String?, price: Swift.Int?)
  public init?(remoteId: Swift.String?, itemId: Swift.Int?, price: Swift.Double?)
}
public struct OutfitBundleItem {
  public let promotions: [Swift.String]?
  public let otherClientItemIds: StyliticsData.DecodableDictionary?
  public let priceLocalized: Swift.String?
  public let affiliateLink: Swift.String?
  public let stocked: Swift.Bool?
  public let salePrice: Swift.Double?
  public let accountUsername: Swift.String?
  public let salePriceLocalized: Swift.String?
  public let price: Swift.Double?
  public var requestId: Swift.String
  public let baseImageUrl: Swift.String?
  public let itemId: Swift.Int?
  public let name: Swift.String?
  public let remoteId: Swift.String?
  public let colorHex: Swift.String?
  public var contextType: StyliticsData.ContextType?
  public let lookbookImageUrl: Swift.String?
  public let category: Swift.String?
  public let tags: [Swift.String]?
  public let department: Swift.String?
  public let largeImageUrl: Swift.String?
  public let smallImageUrl: Swift.String?
  public let color: Swift.String?
  public let accountId: Swift.Int?
  public let productId: Swift.String?
  public let transparentImageUrl: Swift.String?
  public let username: Swift.String?
  public let retailerCategory: Swift.String?
  public let imageUrl: Swift.String?
  public let brand: Swift.String?
  public let style: Swift.String?
  public let sku: Swift.String?
  public let retailerStyle: Swift.String?
  public let clientOriginalImageUrl: Swift.String?
  public let retailer: Swift.String?
  public let gender: Swift.String?
  public let skus: [Swift.String]?
  public let retailerColor: Swift.String?
  public let pattern: Swift.String?
  public let coords: StyliticsData.Coords?
  public var relativeBoost: Swift.String?
  public let collageDimensions: StyliticsData.CollageDimensions?
  public let region: Swift.String?
  public let rowWidgetImageUrl: Swift.String?
  public let id: Swift.Int?
  public var widgetType: StyliticsData.TrackingWidgetType?
}
extension StyliticsData.OutfitBundleItem : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension StyliticsData.OutfitBundleItem {
  public func updateReplacementFromAnchorItem(_ anchorItem: StyliticsData.OutfitBundleItem) -> StyliticsData.OutfitBundleItem
}
public struct UpsellItems : StyliticsData.IStyliticsData {
  public var upsells: [StyliticsData.OutfitBundleItem]?
}
extension StyliticsData.UpsellItems : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public enum EngagementInfo {
  case replacement(outfitBundle: StyliticsData.OutfitBundle, oldOutfitBundleItem: StyliticsData.OutfitBundleItem, newOutfitBundleItem: StyliticsData.OutfitBundleItem)
  case outfitBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case outfitBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case classicBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case classicBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case hotspotBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case hotspotBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case gridBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case gridBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case galleryBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case galleryBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case eventDetails(requestId: Swift.String)
  case shopTheSetItem(shopTheSetItemsInfo: StyliticsData.ShopTheSetItemsInfo, shopTheSetEventType: StyliticsData.ShopTheSetEventType)
  case styledForYouBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case styledForYouBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case outfitLandingPageBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case outfitLandingPageBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case trendingBundle(outfitBundle: StyliticsData.OutfitBundle, position: Swift.Int)
  case trendingBundleItem(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case upsellsItemData(outfitBundleItem: StyliticsData.OutfitBundleItem, position: Swift.Int)
  case styledForYouFullPageData(requestId: Swift.String, position: Swift.Int)
}
public struct EngagementsTrackingInfo {
  public init(event: StyliticsData.Event, engagementInfo: StyliticsData.EngagementInfo, extraInfo: [Swift.String : Any]? = nil)
}
public struct StyledForYouContext {
  public var requested: [StyliticsData.StyledForYouContextItem]
  public var additional: [StyliticsData.StyledForYouContextItem]
}
extension StyliticsData.StyledForYouContext : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct DecodableDictionary : Swift.Decodable {
  public typealias Value = [Swift.String : Any]
  public let dictionary: StyliticsData.DecodableDictionary.Value?
  public init(from decoder: any Swift.Decoder) throws
}
public struct DynamicGalleriesResponse {
  public typealias ResponseType = StyliticsData.GalleryBundles
  public let response: Foundation.URLResponse?
  public let data: StyliticsData.DynamicGalleriesResponse.ResponseType?
  public let error: (any Swift.Error)?
}
public enum DataApisHost {
  case production
  case staging
  case custom(Swift.String)
  public var host: Swift.String {
    get
  }
}
public protocol IStyliticsData {
}
public enum OutfitTemplate {
  case classic
  case hotspot
  case grid
  public static func == (a: StyliticsData.OutfitTemplate, b: StyliticsData.OutfitTemplate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SYFYFullPageModule : Swift.String {
  case syfy
  case trendingBundles
  case upsells
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Personalization {
  public let browsedItems: [StyliticsData.BrowsedItem]?
  public let purchasedItems: [StyliticsData.PurchasedItem]?
}
extension StyliticsData.Personalization : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrendingBundlesResponse {
  public typealias ResponseType = StyliticsData.TrendingBundles
  public let response: Foundation.URLResponse?
  public var data: StyliticsData.TrendingBundlesResponse.ResponseType?
  public let error: (any Swift.Error)?
  public func isResponseEmpty() -> Swift.Bool
  public init(response: Foundation.URLResponse?, data: StyliticsData.TrendingBundlesResponse.ResponseType? = nil, error: (any Swift.Error)?)
}
public struct OutfitBundle {
  public let personalization: StyliticsData.Personalization?
  public let lookbookImageUrl: Swift.String?
  public let primaryStyliticsItemId: Swift.Int?
  public let largeImageUrl: Swift.String?
  public let transparentImageUrl: Swift.String?
  public let username: Swift.String?
  public let baseImageUrl: Swift.String?
  public let imageUrl: Swift.String?
  public let primaryRemoteId: Swift.String?
  public let coverImageUrl: Swift.String?
  public let accountUsername: Swift.String?
  public var requestId: Swift.String
  public let accountId: Swift.Int?
  public let id: Swift.Int?
  public var items: [StyliticsData.OutfitBundleItem]?
  public let similarItemRemoteId: Swift.String?
  public var contextType: StyliticsData.ContextType?
  public var bundleContext: StyliticsData.BundleContext?
  public let anchorItems: [Swift.String]?
  public let tags: [Swift.String]?
  public let updatedAt: Swift.String?
  public let relativeBoost: Swift.String?
  public let primaryRequestedId: Swift.String?
  public let label: Swift.String?
  public let versionId: Swift.Int?
  public let sessionId: Swift.String?
  public let impressionId: Swift.String?
  public let onModelImage: Swift.Bool?
  public let widgetAPIOutfitSortCompare: StyliticsData.DecodableDictionary?
  public let imageUpdatedAt: Swift.String?
  public let traits: [StyliticsData.DecodableDictionary]?
  public var widgetType: StyliticsData.TrackingWidgetType?
}
extension StyliticsData.OutfitBundle : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension StyliticsData.CollageDimensions.CodingKeys : Swift.Equatable {}
extension StyliticsData.CollageDimensions.CodingKeys : Swift.Hashable {}
extension StyliticsData.CollageDimensions.CodingKeys : Swift.RawRepresentable {}
extension StyliticsData.ContextType : Swift.Equatable {}
extension StyliticsData.ContextType : Swift.Hashable {}
extension StyliticsData.ContextType : Swift.RawRepresentable {}
extension StyliticsData.NetworkError : Swift.Equatable {}
extension StyliticsData.NetworkError : Swift.Hashable {}
extension StyliticsData.Event : Swift.Equatable {}
extension StyliticsData.Event : Swift.Hashable {}
extension StyliticsData.Event : Swift.RawRepresentable {}
extension StyliticsData.UIComponent : Swift.Equatable {}
extension StyliticsData.UIComponent : Swift.Hashable {}
extension StyliticsData.UIComponent : Swift.RawRepresentable {}
extension StyliticsData.ShopTheSetEventType : Swift.Equatable {}
extension StyliticsData.ShopTheSetEventType : Swift.Hashable {}
extension StyliticsData.ShopTheSetEventType : Swift.RawRepresentable {}
extension StyliticsData.ShopTheSetActionItemPosition : Swift.Equatable {}
extension StyliticsData.ShopTheSetActionItemPosition : Swift.Hashable {}
extension StyliticsData.TrackingInfoKey : Swift.Equatable {}
extension StyliticsData.TrackingInfoKey : Swift.Hashable {}
extension StyliticsData.TrackingInfoKey : Swift.RawRepresentable {}
extension StyliticsData.TrackingWidgetType : Swift.Equatable {}
extension StyliticsData.TrackingWidgetType : Swift.Hashable {}
extension StyliticsData.TrackingWidgetType : Swift.RawRepresentable {}
extension StyliticsData.OutfitTemplate : Swift.Equatable {}
extension StyliticsData.OutfitTemplate : Swift.Hashable {}
extension StyliticsData.SYFYFullPageModule : Swift.Equatable {}
extension StyliticsData.SYFYFullPageModule : Swift.Hashable {}
extension StyliticsData.SYFYFullPageModule : Swift.RawRepresentable {}
